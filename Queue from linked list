public class queue_using_Array {
    static class queue {
        int arr[];
        int size;
        int rear = -1;

        queue(int n) {
            arr = new int[n];
            this.size = n;
        }

        public boolean isEmpty() {
            return rear == -1;
        }

        // Add element
        public void add(int data) {
            if (rear == size - 1) {
                System.out.println("Full queue");
                return;
            }
            rear++;
            arr[rear] = data;
        }

        // Remove element
        public int remove() {
            if (isEmpty()) {
                System.out.println("Empty queue");
                return -1;
            }
            int front = arr[0];
            for (int i = 0; i < rear; i++) {
                arr[i] = arr[i + 1];
            }
            rear--;
            return front;
        }

        // Peek element
        public int peek() {
            if (isEmpty()) {
                System.out.println("Empty queue");
                return -1;
            }
            return arr[0];
        }

        // Print all elements
        public void printQueue() {
            if (isEmpty()) {
                System.out.println("Queue is empty");
                return;
            }
            System.out.print("Queue elements: ");
            for (int i = 0; i <= rear; i++) {
                System.out.print(arr[i] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String args[]) {
        queue q = new queue(10);
        q.add(5);
        q.add(10);
        q.add(15);
        System.out.println("Peek: " + q.peek());
        System.out.println("Removed: " + q.remove());

        System.out.println("The defined queue:");
        q.printQueue();

        q.add(1);
        q.add(2);
        q.add(3);
        q.add(4);
        q.add(5);
        q.add(6);
        q.add(7);
        q.printQueue();
    }
}
